name: CI/CD Pipeline - Backend & Frontend Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # Backend
  DJANGO_SETTINGS_MODULE: core.settings
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  
  # Frontend
  VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
  
  # Database
  DB_NAME: test_db
  DB_USER: postgres
  DB_PASSWORD: postgres
  DB_HOST: postgres
  DB_PORT: 5432
  
  # Redis
  REDIS_HOST: localhost
  REDIS_PORT: 6379
  REDIS_DB: 0

jobs:
  # ========================================
  # BACKEND TESTS & QUALITY
  # ========================================
  backend-tests:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 30s
      
      redis:
        image: redis:6-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run backend tests
      run: |
        python manage.py test --verbosity=2 --parallel=4
      env:
        DB_NAME: ${{ env.DB_NAME }}
        DB_USER: ${{ env.DB_USER }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
        DB_HOST: ${{ env.DB_HOST }}
        DB_PORT: ${{ env.DB_PORT }}
        REDIS_HOST: ${{ env.REDIS_HOST }}
        REDIS_PORT: ${{ env.REDIS_PORT }}
        REDIS_DB: ${{ env.REDIS_DB }}
        DJANGO_SECRET_KEY: test-secret-key
        DEBUG: 0

    - name: Run backend linting
      run: |
        pip install flake8 black isort
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check --diff .
        isort --check-only --diff .

    - name: Run backend security checks
      run: |
        pip install bandit safety
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload backend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # ========================================
  # FRONTEND TESTS & QUALITY
  # ========================================
  frontend-tests:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tickets-admin-frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: tickets-admin-frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: tickets-admin-frontend
      run: |
        npm run lint
        npm run format:check

    - name: Run frontend tests
      working-directory: tickets-admin-frontend
      run: |
        npm run test:unit
        npm run test:coverage

    - name: Run frontend type checking
      working-directory: tickets-admin-frontend
      run: npm run type-check

    - name: Build frontend
      working-directory: tickets-admin-frontend
      run: npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: tickets-admin-frontend/dist/
        retention-days: 30

    - name: Upload frontend test coverage
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage
        path: tickets-admin-frontend/coverage/
        retention-days: 30

  # ========================================
  # INTEGRATION TESTS
  # ========================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 30s
      
      redis:
        image: redis:6-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tickets-admin-frontend/package-lock.json

    - name: Install dependencies
      run: |
        # Backend
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        # Frontend
        cd tickets-admin-frontend && npm ci

    - name: Start backend server
      run: |
        python manage.py migrate
        python manage.py runserver 0.0.0.0:8000 &
        sleep 10
      env:
        DB_NAME: ${{ env.DB_NAME }}
        DB_USER: ${{ env.DB_USER }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
        DB_HOST: ${{ env.DB_HOST }}
        DB_PORT: ${{ env.DB_PORT }}
        REDIS_HOST: ${{ env.REDIS_HOST }}
        REDIS_PORT: ${{ env.REDIS_PORT }}
        REDIS_DB: ${{ env.REDIS_DB }}
        DJANGO_SECRET_KEY: test-secret-key
        DEBUG: 1

    - name: Run integration tests
      working-directory: tickets-admin-frontend
      run: |
        npm run test:e2e
      env:
        VITE_API_BASE_URL: http://localhost:8000/api

  # ========================================
  # BUILD & DEPLOY
  # ========================================
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/emision-tickets-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/emision-tickets-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: tickets-admin-frontend/dist

    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./tickets-admin-frontend
        file: ./tickets-admin-frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/emision-tickets-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/emision-tickets-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply, docker-compose, etc.

    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply, docker-compose, etc.

  # ========================================
  # NOTIFICATIONS
  # ========================================
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        # Add your notification logic here (Slack, email, etc.)

    - name: Notify on failure
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ CI/CD Pipeline failed!"
        # Add your notification logic here (Slack, email, etc.)
